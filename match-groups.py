import re
import commands


def match_rules():
#####match the IAS groups inside custom security-groups 
####(System generated by IAS)

  result = []
  ias_groups = get_ias_ids('./prod-all.ias')
  grp_sg_list = get_sg_ids('./prod-all.sg')
  for each in grp_sg_list:
    cust_group = each
    print ">>>>", cust_group
    rules = commands.getoutput("aws --profile prod ec2 describe-security-groups --group-ids %s --output text" % cust_group)
    lines = rules.split("\n")
    for each_line in lines:
    ##print ">>>>", each_line
      group_name = re.search(r'sg\-[0-9a-z]*', each_line)
      if group_name:
        grp = group_name.group()
        ##print ">>group", grp
        if grp in ias_groups:
          print "IAS Group found inside %s" % grp
          result.append(grp)

  f2 = open('./prod-report', 'w')
  for item in result:
    f2.write(item + "\n")
  f2.close()
  return None


def get_ias_ids(filename):
  ias_list = []
  fopen = open(filename,'r')
  content = fopen.read()
  #groups = re.findall(r'(System\sgenerated\sby\sIAS\.)\t(sg\-[0-9a-z]*)',content)
  groups = re.findall(r'sg\-[0-9a-z]*',content)
  for each in groups:
     ias_list.append(each)
  return ias_list
  fopen.close()

def get_sg_ids(filename):
#### IAS groups should be removed the file
#### sametime all lines should start with securitygroups only

  sg_list = []
  fopen = open(filename,'r')
  content = fopen.read()
  groups = re.findall(r'sg\-[0-9a-z]*', content)
  for each in groups:
     if each not in sg_list:
       sg_list.append(each)
  return sg_list
  fopen.close()



#print get_ias_ids('./prod-all.ias')
print match_rules()
#print get_sg_ids('./prod-all.sg')
#print match_rules('sg-cea14faa')
