#!/usr/bin/python
import re, sys, commands


def match_rules(env):
  result = []
  ias_groups = create_ias(env)
  sg_groups = create_sg(env)
  for each_group in sg_groups:
    cust_group = each_group
    print ">>>>", cust_group
    rules = commands.getoutput("aws --profile %s ec2 describe-security-groups --group-ids %s --output text" % (env, cust_group))
    lines = rules.split("\n")
    for each_line in lines:
    ##print ">>>>", each_line
      group_name = re.search(r'sg\-[0-9a-z]*', each_line)
      if group_name:
        grp = group_name.group()
        ##print ">>group", grp
        if grp in ias_groups:
          print "Group Name: %s found inside IAS" % grp
          result.append(grp)

########
##report file
  filename = env+'-report'
  f2 = open(filename, 'w')
  for item in result:
    f2.write(item + "\n")
  f2.close()
  return result


def create_sg(env):
  sg_list = []
  ec2_env = env
  sg_lines = commands.getoutput("aws --profile %s ec2 describe-security-groups --output text" % ec2_env)
  for each_line in sg_lines.split("\n"):
    if each_line.startswith('SECURITYGROUPS'):
      if 'System generated by IAS.' not in each_line:
        match = re.search(r'sg\-[0-9a-z]*', each_line)
        if match:
          sg = match.group()
          sg_list.append(sg)
  return sg_list

def create_ias(env):
  ias_list = []
  ec2_env = env
  sg_lines = commands.getoutput("aws --profile %s ec2 describe-security-groups --output text" % ec2_env)
  for each_line in sg_lines.split("\n"):
    if each_line.startswith('SECURITYGROUPS'):
      if 'System generated by IAS.' in each_line:
        match = re.search(r'sg\-[0-9a-z]*', each_line)
        if match:
          ias = match.group()
          ias_list.append(ias)
  return  ias_list

def main():
  if len(sys.argv) != 3:
    print 'Usage: ./match-test --env {prod|qa|dev}'
    sys.exit(1)

  option = sys.argv[1]
  env = sys.argv[2]
  if option == '--env':
    print match_rules(env)
    #print create_sg(env)
  else:
    print 'unknown option: ' + option
    sys.exit(1)

# This is the standard boilerplate that calls the main() function.
if __name__ == '__main__':
  main()
